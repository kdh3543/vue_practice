{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\nexport default {\n  components: {\n    Toast\n  },\n\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const todo = ref(null);\n    const originTodo = ref(null);\n    const loading = ref(true);\n    const todoId = route.params.id;\n    const showToast = ref(false);\n    const toastMessage = ref('');\n\n    const getTodo = async () => {\n      try {\n        const res = await axios.get('http://localhost:3000/todos/' + todoId);\n        todo.value = { ...res.data\n        };\n        originTodo.value = { ...res.data\n        };\n        loading.value = false;\n      } catch (err) {\n        triggerToast('error');\n      }\n    };\n\n    const todoUpdated = computed(() => {\n      return !_.isEqual(todo.value, originTodo.value);\n    });\n\n    const toggleTodoStatus = () => {\n      todo.value.completed = !todo.value.completed;\n    };\n\n    const moveToTodoListPage = () => {\n      router.push({\n        name: 'Todos'\n      });\n    };\n\n    const triggerToast = message => {\n      toastMessage.value = message;\n      showToast.value = true;\n      setTimeout(() => {\n        toastMessage.value = '';\n        showToast.value = false;\n      }, 3000);\n    };\n\n    const onSave = async () => {\n      try {\n        const res = await axios.put('http://localhost:3000/todos/' + todoId, {\n          subject: todo.value.subject,\n          completed: todo.value.completed\n        });\n        originTodo.value = { ...res.data\n        };\n        triggerToast('success save');\n      } catch (err) {\n        triggerToast('error');\n      }\n    };\n\n    getTodo();\n    return {\n      todo,\n      loading,\n      toggleTodoStatus,\n      moveToTodoListPage,\n      onSave,\n      todoUpdated,\n      showToast,\n      toastMessage\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAiCA,SAAQA,GAAR,EAAaC,QAAb,QAA4B,KAA5B;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,YAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,eAAe;AACXC,YAAU,EAAC;AACTD;AADS,GADA;;AAIXE,OAAK,GAAE;AACH,UAAMC,KAAI,GAAIP,QAAQ,EAAtB;AACA,UAAMQ,MAAK,GAAIP,SAAS,EAAxB;AACA,UAAMQ,IAAG,GAAIX,GAAG,CAAC,IAAD,CAAhB;AACA,UAAMY,UAAS,GAAIZ,GAAG,CAAC,IAAD,CAAtB;AACA,UAAMa,OAAM,GAAIb,GAAG,CAAC,IAAD,CAAnB;AACA,UAAMc,MAAK,GAAIL,KAAK,CAACM,MAAN,CAAaC,EAA5B;AACA,UAAMC,SAAQ,GAAIjB,GAAG,CAAC,KAAD,CAArB;AACA,UAAMkB,YAAW,GAAIlB,GAAG,CAAC,EAAD,CAAxB;;AAEA,UAAMmB,OAAM,GAAI,YAAY;AAC1B,UAAG;AACD,cAAMC,GAAE,GAAI,MAAMhB,KAAK,CAACiB,GAAN,CAAU,iCAA+BP,MAAzC,CAAlB;AAEAH,YAAI,CAACW,KAAL,GAAa,EAAC,GAAGF,GAAG,CAACG;AAAR,SAAb;AACAX,kBAAU,CAACU,KAAX,GAAmB,EAAC,GAAGF,GAAG,CAACG;AAAR,SAAnB;AACAV,eAAO,CAACS,KAAR,GAAgB,KAAhB;AACD,OAND,CAMC,OAAME,GAAN,EAAU;AACTC,oBAAY,CAAC,OAAD,CAAZ;AACF;AAEF,KAXA;;AAaA,UAAMC,WAAU,GAAIzB,QAAQ,CAAC,MAAM;AACjC,aAAO,CAACI,CAAC,CAACsB,OAAF,CAAUhB,IAAI,CAACW,KAAf,EAAqBV,UAAU,CAACU,KAAhC,CAAR;AACD,KAF2B,CAA5B;;AAIA,UAAMM,gBAAe,GAAI,MAAM;AAC7BjB,UAAI,CAACW,KAAL,CAAWO,SAAX,GAAuB,CAAClB,IAAI,CAACW,KAAL,CAAWO,SAAnC;AACF,KAFA;;AAIA,UAAMC,kBAAiB,GAAI,MAAM;AAC/BpB,YAAM,CAACqB,IAAP,CAAY;AACVC,YAAI,EAAC;AADK,OAAZ;AAGF,KAJA;;AAKA,UAAMP,YAAW,GAAKQ,OAAD,IAAa;AAChCf,kBAAY,CAACI,KAAb,GAAqBW,OAArB;AACAhB,eAAS,CAACK,KAAV,GAAkB,IAAlB;AACAY,gBAAU,CAAC,MAAM;AACfhB,oBAAY,CAACI,KAAb,GAAqB,EAArB;AACAL,iBAAS,CAACK,KAAV,GAAkB,KAAlB;AACD,OAHS,EAGR,IAHQ,CAAV;AAIF,KAPA;;AAQA,UAAMa,MAAK,GAAI,YAAY;AACzB,UAAG;AACD,cAAMf,GAAE,GAAI,MAAMhB,KAAK,CAACgC,GAAN,CAAU,iCAA+BtB,MAAzC,EAAgD;AAChEuB,iBAAO,EAAE1B,IAAI,CAACW,KAAL,CAAWe,OAD4C;AAEhER,mBAAS,EAAElB,IAAI,CAACW,KAAL,CAAWO;AAF0C,SAAhD,CAAlB;AAIAjB,kBAAU,CAACU,KAAX,GAAmB,EAAC,GAAGF,GAAG,CAACG;AAAR,SAAnB;AACAE,oBAAY,CAAC,cAAD,CAAZ;AACD,OAPD,CAOC,OAAMD,GAAN,EAAU;AACTC,oBAAY,CAAC,OAAD,CAAZ;AACF;AAEF,KAZA;;AAcAN,WAAO;AACP,WAAM;AACJR,UADI;AAEJE,aAFI;AAGJe,sBAHI;AAIJE,wBAJI;AAKJK,YALI;AAMJT,iBANI;AAOJT,eAPI;AAQJC;AARI,KAAN;AAUJ;;AAzEW,CAAf","names":["ref","computed","useRoute","useRouter","axios","_","Toast","components","setup","route","router","todo","originTodo","loading","todoId","params","id","showToast","toastMessage","getTodo","res","get","value","data","err","triggerToast","todoUpdated","isEqual","toggleTodoStatus","completed","moveToTodoListPage","push","name","message","setTimeout","onSave","put","subject"],"sourceRoot":"","sources":["/Applications/kdh3543/vue_practice1/src/pages/todos/_id.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>To-Do Page</h1>\n    <div v-if=\"loading\">\n      Loading...\n    </div>\n    <form v-else @submit.prevent=\"onSave\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <div class=\"form-group\">\n            <label>Subject</label>\n            <input v-model=\"todo.subject\" type=\"text\" class=\"form-control\">\n          </div>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"form-group\">\n            <label>Status</label>\n            <div>\n              <button type=\"button\" class=\"btn\" :class=\"todo.completed ? 'btn-success' : 'btn-danger'\" @click=\"toggleTodoStatus\">{{todo.completed ? 'Completed' : 'Incompleted'}}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"!todoUpdated\">Save</button>\n      <button class=\"btn btn-outline-dark m-2\" @click=\"moveToTodoListPage\">Cancel</button>\n    </form>\n    <Toast v-if=\"showToast\" :message=\"toastMessage\"/>\n  </div>\n  \n</template>\n\n<script>\nimport {ref, computed} from 'vue';\nimport {useRoute, useRouter} from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\n\nexport default {\n    components:{\n      Toast\n    },\n    setup(){\n        const route = useRoute();\n        const router = useRouter();\n        const todo = ref(null);\n        const originTodo = ref(null);\n        const loading = ref(true);\n        const todoId = route.params.id;\n        const showToast = ref(false);\n        const toastMessage = ref('');\n\n        const getTodo = async () => {\n          try{\n            const res = await axios.get('http://localhost:3000/todos/'+todoId)\n          \n            todo.value = {...res.data};\n            originTodo.value = {...res.data};\n            loading.value = false;\n          }catch(err){\n            triggerToast('error');\n          }\n          \n        }\n        \n        const todoUpdated = computed(() => {\n          return !_.isEqual(todo.value,originTodo.value);\n        })\n\n        const toggleTodoStatus = () => {\n          todo.value.completed = !todo.value.completed;\n        }\n\n        const moveToTodoListPage = () => {\n          router.push({\n            name:'Todos'\n          })\n        }\n        const triggerToast = (message) => {\n          toastMessage.value = message;\n          showToast.value = true;\n          setTimeout(() => {\n            toastMessage.value = '';\n            showToast.value = false;\n          },3000)\n        }\n        const onSave = async () => {\n          try{\n            const res = await axios.put('http://localhost:3000/todos/'+todoId,{\n              subject: todo.value.subject,\n              completed: todo.value.completed\n            })\n            originTodo.value = {...res.data}\n            triggerToast('success save');\n          }catch(err){\n            triggerToast('error');\n          }\n          \n        }\n\n        getTodo();\n        return{\n          todo,\n          loading,\n          toggleTodoStatus,\n          moveToTodoListPage,\n          onSave,\n          todoUpdated,\n          showToast,\n          toastMessage\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}