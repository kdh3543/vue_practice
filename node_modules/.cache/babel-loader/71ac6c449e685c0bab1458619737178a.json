{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\nimport { useToast } from '@/hooks/toast';\nexport default {\n  components: {\n    Toast\n  },\n  props: {\n    editing: {\n      type: Boolean,\n      default: false,\n      body: ''\n    }\n  },\n\n  setup(props) {\n    const route = useRoute();\n    const router = useRouter();\n    const todo = ref({\n      subject: '',\n      completed: false\n    });\n    const originTodo = ref(null);\n    const loading = ref(false);\n    const todoId = route.params.id;\n    const {\n      toastMessage,\n      toastAlertType,\n      showToast,\n      triggerToast\n    } = useToast();\n\n    const getTodo = async () => {\n      loading.value = true;\n\n      try {\n        const res = await axios.get('http://localhost:3000/todos/' + todoId);\n        todo.value = { ...res.data\n        };\n        originTodo.value = { ...res.data\n        };\n        loading.value = false;\n      } catch (err) {\n        triggerToast('error', 'danger');\n        loading.value = false;\n      }\n    };\n\n    const todoUpdated = computed(() => {\n      return !_.isEqual(todo.value, originTodo.value);\n    });\n\n    const toggleTodoStatus = () => {\n      todo.value.completed = !todo.value.completed;\n    };\n\n    const moveToTodoListPage = () => {\n      router.push({\n        name: 'Todos'\n      });\n    };\n\n    const onSave = async () => {\n      try {\n        let res;\n        const data = {\n          subject: todo.value.subject,\n          completed: todo.value.completed,\n          body: todo.value.body\n        };\n\n        if (props.editing) {\n          res = await axios.put('http://localhost:3000/todos/' + todoId, data);\n        } else {\n          res = await axios.post('http://localhost:3000/todos/', data);\n        }\n\n        originTodo.value = { ...res.data\n        };\n        const msg = 'Successfully' + (props.editing ? ` Updated` : ` Created`);\n        triggerToast(msg);\n      } catch (err) {\n        triggerToast('error', 'danger');\n      }\n    };\n\n    if (props.editing) {\n      getTodo();\n    }\n\n    return {\n      todo,\n      loading,\n      toggleTodoStatus,\n      moveToTodoListPage,\n      onSave,\n      todoUpdated,\n      showToast,\n      toastMessage,\n      toastAlertType\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","computed","useRoute","useRouter","axios","_","Toast","useToast","components","props","editing","type","Boolean","default","body","setup","route","router","todo","subject","completed","originTodo","loading","todoId","params","id","toastMessage","toastAlertType","showToast","triggerToast","getTodo","value","res","get","data","err","todoUpdated","isEqual","toggleTodoStatus","moveToTodoListPage","push","name","onSave","put","post","msg"],"sourceRoot":"","sources":["/Applications/kdh3543/vue_practice1/src/components/TodoForm.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>To-Do Page</h1>\n    <div v-if=\"loading\">\n      Loading...\n    </div>\n    <form v-else @submit.prevent=\"onSave\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <div class=\"form-group\">\n            <label>Subject</label>\n            <input v-model=\"todo.subject\" type=\"text\" class=\"form-control\">\n          </div>\n        </div>\n        <div v-if=\"editing\" class=\"col-6\">\n          <div class=\"form-group\">\n            <label>Status</label>\n            <div>\n              <button type=\"button\" class=\"btn\" :class=\"todo.completed ? 'btn-success' : 'btn-danger'\" @click=\"toggleTodoStatus\">{{todo.completed ? 'Completed' : 'Incompleted'}}</button>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-12\">\n          <div class=\"form-group\">\n            <label>Body</label>\n            <textarea v-model=\"todo.body\" class=\"form-control\" cols=\"30\" rows=\"10\"></textarea>\n          </div>\n        </div>\n      </div>\n      \n      <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"!todoUpdated\">{{editing? 'Update' : 'Create'}}</button>\n      <button class=\"btn btn-outline-dark m-2\" @click=\"moveToTodoListPage\">Cancel</button>\n    </form>\n    <Toast v-if=\"showToast\" :message=\"toastMessage\" :type=\"toastAlertType\"/>\n  </div>\n</template>\n\n<script>\nimport {ref, computed} from 'vue';\nimport {useRoute, useRouter} from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\nimport {useToast} from '@/hooks/toast';\n\nexport default {\n    components:{\n      Toast\n    },\n    props:{\n        editing: {\n            type: Boolean,\n            default: false,\n            body: ''\n        }\n    },\n    setup(props){\n      const route = useRoute();\n      const router = useRouter();\n      const todo = ref({\n          subject : '',\n          completed: false,\n      });\n      const originTodo = ref(null);\n      const loading = ref(false);\n      const todoId = route.params.id;\n\n      const{\n        toastMessage,\n        toastAlertType,\n        showToast,\n        triggerToast\n    } = useToast();\n\n      const getTodo = async () => {\n          loading.value = true;\n        try{\n          const res = await axios.get('http://localhost:3000/todos/'+todoId)\n        \n          todo.value = {...res.data};\n          originTodo.value = {...res.data};\n          loading.value = false;\n        }catch(err){\n          triggerToast('error','danger');\n          loading.value = false;\n        }\n      }\n      \n      const todoUpdated = computed(() => {\n        return !_.isEqual(todo.value,originTodo.value);\n      })\n\n      const toggleTodoStatus = () => {\n        todo.value.completed = !todo.value.completed;\n      }\n\n      const moveToTodoListPage = () => {\n        router.push({\n          name:'Todos'\n        })\n      }\n      \n      const onSave = async () => {\n\n        try{\n            let res;\n            const data = {\n                subject: todo.value.subject,\n                completed: todo.value.completed,\n                body: todo.value.body\n            }\n            if(props.editing){\n                res = await axios.put('http://localhost:3000/todos/'+todoId,data)\n            }else{\n                res = await axios.post('http://localhost:3000/todos/',data)\n            }\n          \n            originTodo.value = {...res.data}\n            const msg = 'Successfully'+(props.editing? ` Updated`:` Created`);\n            triggerToast(msg);\n        }catch(err){\n          triggerToast('error','danger');\n        }\n        \n      }\n    if(props.editing){\n        getTodo();\n    }\n      \n      return{\n        todo,\n        loading,\n        toggleTodoStatus,\n        moveToTodoListPage,\n        onSave,\n        todoUpdated,\n        showToast,\n        toastMessage,\n        toastAlertType\n      }\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}