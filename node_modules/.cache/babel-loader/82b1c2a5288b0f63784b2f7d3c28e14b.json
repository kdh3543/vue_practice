{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"container\"\n};\nconst _hoisted_2 = {\n  id: \"counter\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, \" counter: \" + _toDisplayString($setup.counter), 1\n  /* TEXT */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.change && $setup.change(...args))\n  }, \"button\"), _createElementVNode(\"div\", null, [_createTextVNode(_toDisplayString($setup.message) + \" \", 1\n  /* TEXT */\n  ), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.message = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.message]])])]);\n}","map":{"version":3,"mappings":";;AACKA,IAAE,EAAC;;;AACDA,IAAE,EAAC;;;uBADVC,oBASM,KATN,cASM,CARJC,oBAEM,KAFN,cAAkB,eACPC,iBAAEC,cAAF,CADX,EACoB;AAAA;AADpB,GAQI,EALJF,oBAAuC,QAAvC,EAAuC;AAA9BG,WAAK,yCAAED,uCAAF;AAAyB,GAAvC,EAAwB,QAAxB,CAKI,EAJJF,oBAGM,KAHN,EAGM,IAHN,EAGM,mCAFFE,kBAAS,KACX;AAAA;GACI,kBADJF,oBAAyB,OAAzB,EAAyB;+DAATE,iBAAOE;AAAE,GAAzB;;AAAA,oBAAgBF,iBACZ,CAHN,CAII,CATN","names":["id","_createElementBlock","_createElementVNode","_toDisplayString","$setup","onClick","$event"],"sourceRoot":"","sources":["/Applications/kdh3543/vue_practice1/src/App.vue"],"sourcesContent":["<template>\n<div id=\"container\">\n  <div id=\"counter\">\n    counter: {{counter}}\n  </div>\n  <button @click=\"change\">button</button>\n  <div>\n    {{message}}\n    <input v-model=\"message\">\n  </div>\n</div>\n\n</template>\n\n<script>\nimport {ref} from 'vue';\n\nexport default {\n  \n  setup(){\n    const counter = ref('hello world');\n    const change = () => {\n      counter.value = counter.value.split('').reverse().join('');\n    }\n    const message = 'Hello World';\n    return{\n      counter,\n      change,\n      message\n    }  \n  }\n  \n}\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}