{"ast":null,"code":"import { ref, computed, onUnmounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\nimport { useToast } from '@/hooks/toast';\nexport default {\n  components: {\n    Toast\n  },\n\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const todo = ref(null);\n    const originTodo = ref(null);\n    const loading = ref(true);\n    const todoId = route.params.id;\n    const {\n      toastMessage,\n      toastAlertType,\n      showToast,\n      triggerToast\n    } = useToast(); // const showToast = ref(false);\n    // const toastMessage = ref('');\n    // const toastAlertType = ref('');\n    // const timeout = ref(null);\n    // const triggerToast = (message, type='success') => {\n    //   toastMessage.value = message;\n    //   toastAlertType.value = type;\n    //   showToast.value = true;\n    //   timeout.value = setTimeout(() => {\n    //     console.log('hello');\n    //     toastMessage.value = '';\n    //     toastAlertType.value = '';\n    //     showToast.value = false;\n    //   },5000)\n    // }\n\n    onUnmounted(() => {\n      clearTimeout(timeout.value);\n      console.log('unmout');\n    });\n\n    const getTodo = async () => {\n      try {\n        const res = await axios.get('http://localhost:3000/todos/' + todoId);\n        todo.value = { ...res.data\n        };\n        originTodo.value = { ...res.data\n        };\n        loading.value = false;\n      } catch (err) {\n        triggerToast('error', 'danger');\n      }\n    };\n\n    const todoUpdated = computed(() => {\n      return !_.isEqual(todo.value, originTodo.value);\n    });\n\n    const toggleTodoStatus = () => {\n      todo.value.completed = !todo.value.completed;\n    };\n\n    const moveToTodoListPage = () => {\n      router.push({\n        name: 'Todos'\n      });\n    };\n\n    const onSave = async () => {\n      try {\n        const res = await axios.put('http://localhost:3000/todos/' + todoId, {\n          subject: todo.value.subject,\n          completed: todo.value.completed\n        });\n        originTodo.value = { ...res.data\n        };\n        triggerToast('success save');\n      } catch (err) {\n        triggerToast('error', 'danger');\n      }\n    };\n\n    getTodo();\n    return {\n      todo,\n      loading,\n      toggleTodoStatus,\n      moveToTodoListPage,\n      onSave,\n      todoUpdated,\n      showToast,\n      toastMessage,\n      toastAlertType\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","computed","onUnmounted","useRoute","useRouter","axios","_","Toast","useToast","components","setup","route","router","todo","originTodo","loading","todoId","params","id","toastMessage","toastAlertType","showToast","triggerToast","clearTimeout","timeout","value","console","log","getTodo","res","get","data","err","todoUpdated","isEqual","toggleTodoStatus","completed","moveToTodoListPage","push","name","onSave","put","subject"],"sourceRoot":"","sources":["/Applications/kdh3543/vue_practice1/src/pages/todos/_id.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>To-Do Page</h1>\n    <div v-if=\"loading\">\n      Loading...\n    </div>\n    <form v-else @submit.prevent=\"onSave\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <div class=\"form-group\">\n            <label>Subject</label>\n            <input v-model=\"todo.subject\" type=\"text\" class=\"form-control\">\n          </div>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"form-group\">\n            <label>Status</label>\n            <div>\n              <button type=\"button\" class=\"btn\" :class=\"todo.completed ? 'btn-success' : 'btn-danger'\" @click=\"toggleTodoStatus\">{{todo.completed ? 'Completed' : 'Incompleted'}}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"!todoUpdated\">Save</button>\n      <button class=\"btn btn-outline-dark m-2\" @click=\"moveToTodoListPage\">Cancel</button>\n    </form>\n    <Toast v-if=\"showToast\" :message=\"toastMessage\" :type=\"toastAlertType\"/>\n  </div>\n</template>\n\n<script>\nimport {ref, computed, onUnmounted} from 'vue';\nimport {useRoute, useRouter} from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\nimport {useToast} from '@/hooks/toast';\n\nexport default {\n    components:{\n      Toast\n    },\n    setup(){\n      const route = useRoute();\n      const router = useRouter();\n      const todo = ref(null);\n      const originTodo = ref(null);\n      const loading = ref(true);\n      const todoId = route.params.id;\n\n      const {\n        toastMessage,\n        toastAlertType,\n        showToast,\n        triggerToast\n      } = useToast();\n      // const showToast = ref(false);\n      // const toastMessage = ref('');\n      // const toastAlertType = ref('');\n      // const timeout = ref(null);\n      // const triggerToast = (message, type='success') => {\n      //   toastMessage.value = message;\n      //   toastAlertType.value = type;\n      //   showToast.value = true;\n      //   timeout.value = setTimeout(() => {\n      //     console.log('hello');\n      //     toastMessage.value = '';\n      //     toastAlertType.value = '';\n      //     showToast.value = false;\n      //   },5000)\n      // }\n      onUnmounted(()=>{\n        clearTimeout(timeout.value);\n        console.log('unmout');\n      })\n\n      const getTodo = async () => {\n        try{\n          const res = await axios.get('http://localhost:3000/todos/'+todoId)\n        \n          todo.value = {...res.data};\n          originTodo.value = {...res.data};\n          loading.value = false;\n        }catch(err){\n          triggerToast('error','danger');\n        }\n      }\n      \n      const todoUpdated = computed(() => {\n        return !_.isEqual(todo.value,originTodo.value);\n      })\n\n      const toggleTodoStatus = () => {\n        todo.value.completed = !todo.value.completed;\n      }\n\n      const moveToTodoListPage = () => {\n        router.push({\n          name:'Todos'\n        })\n      }\n      \n      const onSave = async () => {\n        try{\n          const res = await axios.put('http://localhost:3000/todos/'+todoId,{\n            subject: todo.value.subject,\n            completed: todo.value.completed\n          })\n          originTodo.value = {...res.data}\n          triggerToast('success save');\n        }catch(err){\n          triggerToast('error','danger');\n        }\n        \n      }\n\n      getTodo();\n      return{\n        todo,\n        loading,\n        toggleTodoStatus,\n        moveToTodoListPage,\n        onSave,\n        todoUpdated,\n        showToast,\n        toastMessage,\n        toastAlertType\n      }\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}